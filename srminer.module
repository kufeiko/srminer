<?php

/**
 * @file
 * Holds hooks and helper functions for the srminer module.
 */

// Calls block specific hooks and overrides & blocks content.
require_once drupal_dirname(__FILE__) . '/srminer.blocks.inc';
module_load_include('inc', 'srminer', 'srminer.query');

/**
 * Hook_menu() .
 */
function srminer_menu() {
  $items = array();

  $items['admin/config/services/srminer'] = array(
    'title' => 'Srminer',
    'description' => 'Configuration for Srminer',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => '0',
  );
  $items['admin/config/services/srminer/settings'] = array(
    'title' => 'Settings for srminer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_srminer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'srminer.forms.inc',
  );
  $items['admin/config/services/srminer/show_structure/%'] = array(
    'title' => 'Show SRM structure',
    'page callback' => '_srminer_show_structure',
    'page arguments' => array(5),
    'access arguments' => array('administer site configuration'),
    'file' => 'srminer.pages.inc',
  );
  $items['admin/config/services/srminer/show_entities'] = array(
    'title' => 'Show SRM entities',
    'page callback' => '_srminer_show_entities',
    'access arguments' => array('administer site configuration'),
    'file' => 'srminer.pages.inc',
  );
  $items['admin/config/services/srminer/test'] = array(
    'title' => 'Make a test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_srminer_test_form'),
    'access arguments' => array('administer site configuration'),
    // 'type' => MENU_LOCAL_TASK,.
    'file' => 'srminer.forms.inc',
  );
  $items['admin/config/services/srminer/test2'] = array(
    'title' => 'Make a test 2',
    'page callback' => '_srminer_test2',
    'access arguments' => array('administer site configuration'),
    'file' => 'srminer.pages.inc',
  );
  $items['srminer/activity/%'] = array(
    'title' => 'Activities recorded in SRM',
    'page callback' => '_srm_activity_recorded',
    'page arguments' => array(2),
    'access arguments' => array('access srm activity'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'srminer.pages.inc',
  );
  $items['user/%user/srm-profile'] = array(
    'title' => 'SRM profile',
    'page callback' => '_srminer_srm_profile',
    'page arguments' => array(1),
    'access callback' => '_srminer_srm_profile_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'srminer.pages.inc',
  );
  $items['srm/json/%'] = array (
    'title' => 'Autocomplete for SRM',
    'page callback' => '_srminer_srm_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function srminer_permission() {
  return array(
    'view own srm profile' => array(
      'title' => t('View own SRM profile'),
    ),
    'view everyones srm profile' => array(
      'title' => t("View everyone's SRM profile"),
    ),
  );
}

/**
 * Test connector Fn .
 */
function _srminer_datatest($endpoint, $user, $pass) {

  // headers: request json format.
  $options['headers'] = array(
    'Accept' => 'application/json',
    'Content-Type' => 'application/json',
  );
  // Misc cURL options.
  $options['curl_opts'] = array(
    CURLOPT_HTTPAUTH => CURLAUTH_NTLM,
    CURLOPT_USERPWD => $user . ':' . $pass,
  );

  // $endpoint = urlencode($endpoint);
  return chr_curl_http_request($endpoint, $options);
}


/**
 * @param $account array user account that belongs to the profile page.
 *
 * @return bool input for hookmenu access callback
 */

function _srminer_srm_profile_access($account) {
  global $user;

  //  if (user_access('view everyones srm activity') || ($uid == $user->uid && user_access('view own srm activity'))) {

  return (($user->uid == $account->uid && user_access('view own srm profile')) || user_access('view everyones srm profile'));
}

/**
 * Implements hook_theme().
 */
function srminer_theme() {
  return array(
    'srm_data' => array(
      'variables' => array('srm_data' => array()),
      'template' => 'srminer-srm-label-value',
    ),
  );
}

/**
 * Defines all SRM fields used by Srminer.
 *
 * @param $fields_keys array of keys of the required fields.
 * @return array associated including the key, SRM key, pertty name and value
 * formatter
 */
function _srminer_field_definitions() {
  return array(
    'FirstName' => array(
      'pretty_name' => t('First name'),
      'formatter' => 'text',
    ),
    'LastName' => array(
      'pretty_name' => t('Last name'),
      'formatter' => 'text',
    ),
    'EMailAddress1' => array(
      'pretty_name' => t('E-mail address'),
      'formatter' => 'text',
    ),
    'EMailAddress2' => array(
      'pretty_name' => t('E-mail address'),
      'formatter' => 'text',
    ),
    'EMailAddress3' => array(
      'pretty_name' => t('E-mail address'),
      'formatter' => 'text',
    ),
    'Telephone1' => array(
      'pretty_name' => t('Telephone number'),
      'formatter' => 'text',
    ),
    'Telephone2' => array(
      'pretty_name' => t('Telephone number'),
      'formatter' => 'text',
    ),
    'Telephone3' => array(
      'pretty_name' => t('Telephone number'),
      'formatter' => 'text',
    ),
    'AssistantPhone' => array(
      'pretty_name' => t('Telephone number assistant'),
      'formatter' => 'text',
    ),
    'MobilePhone' => array(
      'pretty_name' => t('Mobile phone number'),
      'formatter' => 'text',
    ),
    'ManagerPhone' => array(
      'pretty_name' => t('Manager\'s phone number'),
      'formatter' => 'text',
    ),
    'DoNotPhone' => array(
      'pretty_name' => t('Can be contacted via phone'),
      'formatter' => 'neg_bool',
    ),
    'new_VIP' => array(
      'pretty_name' => 'Is a very important person',
      'formatter' => 'bool',
    ),
    'new_PRESS' => array(
      'pretty_name' => 'Is a journalist',
      'formatter' => 'bool',
    ),
    'ModifiedOn' => array(
      'pretty_name' => 'Last update date',
      'formatter' => 'date',
    ),
    'CreatedOn' => array(
      'pretty_name' => 'Creation date of record',
      'formatter' => 'date',
    ),
    'new_SalutationText' => array(
      'pretty_name' => t('Salutation'),
      'formatter' => 'text',
    ),
  );
}

/**
 * Formats a SRM data value
 *
 * @param $value SRM data value e.g. first name
 * @param $formatter type of formatting that must be applied
 * @return string formatted value
 */

function _srminer_srm_value_formatter($value, $formatter) {

  switch($formatter) {
    case 'text':
      $output = check_plain($value);
      break;
    case 'date':
      $matches = array();
      $result = preg_match("/\d+/", $value, $matches);

      if ($result = 1) {
        $output = date("Y/m/d", substr($matches[0], 0, strlen($matches[0]) - 3));
      }
      else {
        $output = 'Unknown.';
      }
      break;
    case 'bool':
      $output = $value == 1 ? t('Yes') : t('No');
      break;
    case 'neg_bool':
      $output = $value == 0 ? t('Yes') : t('No');
      break;
  }

  return $output;

}

 /**
 * Callback function for autocomplete.
 */
function _srminer_srm_autocomplete($field, $string = '') {

  // Find out the field by the funny string in $field.
  $parts = explode('.', $field);
  $field_instance = field_info_instance($parts[0], $parts[1], $parts[2]);

  $odata_entity = $field_instance['widget']['settings']['odata_entity'];
  $odata_field = $field_instance['widget']['settings']['odata_field'];

  $query = array(
    'type' => 'get',
    'entity' => $odata_entity,
    'parameters' => array(
      '$select' => array($odata_field),
      '$filter' => array(
        'startswith' => array($odata_field, "'{$string}'"),
      ),
    ),
  );

  $response = srminer_execute_query($query);
  if(!$response['error']) {
    $matches = array();
    foreach($response['data']['d']['results'] as $row) {
      $matches[$row[$odata_field]] = $row[$odata_field];
    }
    drupal_json_output($matches);
  }

  return;
}

/**
 * Implements hook_field_widget_info().
 */
function srminer_field_widget_info() {
  return array(
    'srm_textfield' => array(
      'label' => t('SRM Text field'),
      'field types' => array('text'),
      'settings' => array(
        'size' => 60,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'weight' => 2,
    ),
  );
}

 /**
 * Implements hook_field_widget_form().
 */
function srminer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if($instance['widget']['type'] == 'srm_textfield') {
    $main_widget = $element + array(
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
      '#size' => $instance['widget']['settings']['size'],
      '#maxlength' => $field['settings']['max_length'],
      '#attributes' => array('class' => array('srm-text')),
      '#autocomplete_path' => 'srm/json/' . $instance['entity_type'] . '.' . $instance['field_name'] . '.' . $instance['bundle'],
    );
    $element['value'] = $main_widget;
  }

  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function srminer_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of textfield'),
    '#default_value' => $settings['size'],
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['odata_entity'] = array(
    '#type' => 'textfield',
    '#title' => t('OData Entity Set to look up'),
    '#default_value' => isset($settings['odata_entity']) ? $settings['odata_entity'] : '',
    '#required' => TRUE,
  );
  $form['odata_field'] = array(
    '#type' => 'textfield',
    '#title' => t('OData Entity Field containing autocomplete data'),
    '#default_value' => isset($settings['odata_field']) ? $settings['odata_field'] : '',
    '#required' => TRUE,
  );

  return $form;
}
